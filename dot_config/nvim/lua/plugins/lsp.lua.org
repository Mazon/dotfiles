-- return {
--
--   {
--     -- Main LSP Configuration
--     'neovim/nvim-lspconfig',
--     dependencies = {
--       -- Automatically install LSPs and related tools to stdpath for Neovim
--       { 'williamboman/mason.nvim', config = true }, -- NOTE: Must be loaded before dependants
--       'williamboman/mason-lspconfig.nvim',
--       'WhoIsSethDaniel/mason-tool-installer.nvim',
--
--       -- Useful status updates for LSP.
--       { 'j-hui/fidget.nvim',       opts = {} },
--
--       -- Allows extra capabilities provided by nvim-cmp
--       'hrsh7th/cmp-nvim-lsp',
--     },
--     config = function()
--       --  This function gets run when an LSP attaches to a particular buffer.
--       vim.api.nvim_create_autocmd('LspAttach', {
--         group = vim.api.nvim_create_augroup('kickstart-lsp-attach', { clear = true }),
--         callback = function(event)
--           -- In this case, we create a function that lets us more easily define mappings specific
--           -- for LSP related items. It sets the mode, buffer and description for us each time.
--           local map = function(keys, func, desc, mode)
--             mode = mode or 'n'
--             vim.keymap.set(mode, keys, func, { buffer = event.buf, desc = 'LSP: ' .. desc })
--           end
--
--           -- Keymaps
--           map('gd', require('telescope.builtin').lsp_definitions, '[G]oto [D]efinition')
--           --          map('K', vim.lsp.buf.hover(), 'Hover')
--           map('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
--           map('gI', require('telescope.builtin').lsp_implementations, '[G]oto [I]mplementation')
--           map('<leader>D', require('telescope.builtin').lsp_type_definitions, 'Type [D]efinition')
--           map('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
--           map('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')
--
--           map('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')
--
--           -- The following code creates a keymap to toggle inlay hints in your
--           -- code, if the language server you are using supports them
--           --
--           -- This may be unwanted, since they displace some of your code
--           if client and client.supports_method(vim.lsp.protocol.Methods.textDocument_inlayHint) then
--             map('<leader>th', function()
--               vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled { bufnr = event.buf })
--             end, '[T]oggle Inlay [H]ints')
--           end
--         end,
--       })
--
--       vim.diagnostic.config {
--         -- virtual_text = false,
--         virtual_text = true,
--       }
--
--       local capabilities = vim.lsp.protocol.make_client_capabilities()
--       capabilities = vim.tbl_deep_extend('force', capabilities, require('cmp_nvim_lsp').default_capabilities())
--
--       -- Enable the following language servers
--       local servers = {
--         yamlls = {},
--         rust_analyzer = {},
--         zls = {
--           cmd = { '/usr/bin/zls' },
--           settings = {
--             zls = {
--               semantic_tokens = 'partial',
--               zig_exe_path = '/usr/bin/zig',
--             },
--           },
--         },
--
--         lua_ls = {
--           settings = {
--             Lua = {
--               completion = {
--                 callSnippet = 'Replace',
--               },
--             },
--           },
--         },
--       }
--     end,
--   },
-- }
